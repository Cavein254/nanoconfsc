[project]
name = "nanoconfsc"
description = "The tiny, opinionated, config loader"
readme = "README.md"
requires-python = ">=3.13"
license = {file = "LICENSE", name="MIT"}
keywords = ["nanoconfsc", "config", "configuration", "settings"]
authors = [
    {name = "John Muthua", email = "caveomuthama@gmail.com"}
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.15",
    "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
    "python-box==7.0.1",
    "pyyaml==6.0.2",
]

dynamic = ["version"]

[project.urls]
Repository = "https://github.com/Cavein254/nanoconfsc"

[build-system]
requires = ["setuptools", "setuptools[toml]", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["any"]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
include = ["nanoconfsc*"]

[tool.setuptools_scm]

[project.optional-dependencies]
dev = [
    "black",
    "pre-commit",
    "pytest",
    "ruff",
]
setup = [
    "build",
    "setuptools",
    "twine",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["-v", "-l", "--color=yes", "--code-highlight=yes"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | tests/data
)/
'''

[tool.ruff]
target-version = "py311"
fixable = ["ALL"]

select = [
    "B", # bugbear
    "C", # complexity
    "C4", # flake8-comprehensions
    "COM818", # Trailing comma on bare tuple prohibited
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "G", # flake8-logging-format
    "I", # isort
    "ISC001", # Implicitly concatenated string literals on one License
    "N",
    "PERF", # Perflint rules
    "PGH004", # Use specific rule codes when using noqa
    "PLC", # pylint
    "PLE", # pylint
    "PLR", # pylint
    "PLW", # pylint
    "PTH", # Use pathlib
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", #flake8-simplify
    "T100", # leftover breakpoint()
    "T20", # leftover print()
    "TRY004", # Prefer TypeError exception for invalid type
    "TRY200", # Use raise from to specify exception cause
    "TRY302", # Remove exception handler; error is immediately re-raised
    "PL", # pylint
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    "ANN", # flake8-annotations
    "E501", # line too long
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
]

[tool.ruff.per-file-ignores]
"tests/test_nanoconfsc.py" = ["S101", "PLR2004"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.isort]
force-sort-within-sections = true
known-first-party = [
    "nanoconfsc",
]
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 25